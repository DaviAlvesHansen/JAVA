import java.util.ArrayList;
import java.util.Scanner;

// Interface Exibivel
interface Exibivel {
    void exibirDados();
}

// Classe abstrata Veiculo
abstract class Veiculo implements Exibivel {
    protected String placa;
    protected String modelo;
    protected int ano;

    public Veiculo(String placa, String modelo, int ano) {
        this.placa = placa;
        this.modelo = modelo;
        this.ano = ano;
    }

    public String getPlaca() { return placa; }
    public void setPlaca(String placa) { this.placa = placa; }

    public String getModelo() { return modelo; }
    public void setModelo(String modelo) { this.modelo = modelo; }

    public int getAno() { return ano; }
    public void setAno(int ano) { this.ano = ano; }
}

// Classe Carro
class Carro extends Veiculo {
    private int qtdPortas;

    public Carro(String placa, String modelo, int ano, int qtdPortas) {
        super(placa, modelo, ano);
        this.qtdPortas = qtdPortas;
    }

    @Override
    public void exibirDados() {
        System.out.printf("Carro - Modelo: %s | Placa: %s | Ano: %d | Portas: %d\n",
                modelo, placa, ano, qtdPortas);
    }
}

// Classe Moto
class Moto extends Veiculo {
    private int cilindrada;

    public Moto(String placa, String modelo, int ano, int cilindrada) {
        super(placa, modelo, ano);
        this.cilindrada = cilindrada;
    }

    @Override
    public void exibirDados() {
        System.out.printf("Moto - Modelo: %s | Placa: %s | Ano: %d | Cilindrada: %dcc\n",
                modelo, placa, ano, cilindrada);
    }
}

// Classe Caminhao
class Caminhao extends Veiculo {
    private double capacidadeCarga;

    public Caminhao(String placa, String modelo, int ano, double capacidadeCarga) {
        super(placa, modelo, ano);
        this.capacidadeCarga = capacidadeCarga;
    }

    @Override
    public void exibirDados() {
        System.out.printf("Caminhão - Modelo: %s | Placa: %s | Ano: %d | Capacidade: %.1f toneladas\n",
                modelo, placa, ano, capacidadeCarga);
    }
}

// Classe principal com menu
public class CadastroVeiculos {
    private static ArrayList<Veiculo> veiculos = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int opcao;
        do {
            exibirMenu();
            opcao = Integer.parseInt(scanner.nextLine());

            switch (opcao) {
                case 1 -> cadastrarVeiculo();
                case 2 -> listarVeiculos();
                case 3 -> System.out.println("Encerrando o programa...");
                default -> System.out.println("Opção inválida!");
            }
        } while (opcao != 3);
    }

    private static void exibirMenu() {
        System.out.println("\n--- Cadastro de Veículos ---");
        System.out.println("1 - Cadastrar novo veículo");
        System.out.println("2 - Listar veículos");
        System.out.println("3 - Sair");
        System.out.print("Escolha uma opção: ");
    }

    private static void cadastrarVeiculo() {
        System.out.print("Tipo (1-Carro, 2-Moto, 3-Caminhão): ");
        int tipo = Integer.parseInt(scanner.nextLine());

        System.out.print("Modelo: ");
        String modelo = scanner.nextLine();
        System.out.print("Placa: ");
        String placa = scanner.nextLine();
        System.out.print("Ano: ");
        int ano = Integer.parseInt(scanner.nextLine());

        switch (tipo) {
            case 1 -> {
                System.out.print("Quantidade de portas: ");
                int portas = Integer.parseInt(scanner.nextLine());
                veiculos.add(new Carro(placa, modelo, ano, portas));
            }
            case 2 -> {
                System.out.print("Cilindrada: ");
                int cilindrada = Integer.parseInt(scanner.nextLine());
                veiculos.add(new Moto(placa, modelo, ano, cilindrada));
            }
            case 3 -> {
                System.out.print("Capacidade de carga (em toneladas): ");
                double capacidade = Double.parseDouble(scanner.nextLine());
                veiculos.add(new Caminhao(placa, modelo, ano, capacidade));
            }
            default -> System.out.println("Tipo inválido.");
        }
    }

    private static void listarVeiculos() {
        if (veiculos.isEmpty()) {
            System.out.println("Nenhum veículo cadastrado.");
        } else {
            System.out.println("\n--- Lista de Veículos ---");
            for (Veiculo v : veiculos) {
                v.exibirDados(); // Polimorfismo em ação
            }
        }
    }
}
